name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      runUiTests:
        description: Run UI tests
        required: false
        type: boolean

jobs:
  ui-tests:
    if: ${{ github.event.inputs.runUiTests }}  # see #5495d097
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Dismiss upgrade dialog if present
      run: |
            update_name=$(softwareupdate -l | grep "Title: " | awk -F[:,] '{print $2}' | awk '{$1=$1};1')
            if [ ! -z "$update_name" ]; then
                sudo softwareupdate --ignore "$update_name"
            fi
    - name: Get current time
      id: start_time
      run: 'echo "::set-output name=unixtime::@$(date +%s)"'
    - name: Build and run UI tests
      run: xcodebuild clean test -scheme whatdid-ui-test -resultBundlePath ${{ runner.temp }}/test-results/bundle
    - name: Gather logs
      if: ${{ failure() }}
      run: |
            mkdir "${{ runner.temp }}/export"
            mv "$(readlink ${{ runner.temp }}/test-results/bundle)" "${{ runner.temp }}/export/whatdid-uitest-failures-${{ github.run_number }}.xcresult"
    - name: Upload test artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: whatdid-ui-tests-${{ github.run_number }}
        path: ${{ runner.temp }}/export
  unit-tests:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build and run unit tests
      run: xcodebuild clean test -scheme whatdid-debug | tee build.stdout
    - name: Look for TODOs
      run: |
            # Check for TODOs
            # Each line will be something like:
            # /path/to/whatdid/whatdid/main/SomeFile.swift:1234:56: warning: todo hello
            #
            # The output format for GH actions is:
            # ::error file={name},line={line},endLine={endLine},title={title}::{message}
            set -euo pipefail
            grep -i 'warning: todo' build.stdout | sort -u > todos.txt
            while read -r line; do
              IFS=: read filename fileline filecol warning message <<< "$line"
              message="$(echo "$message" | sed 's/ *todo  *//')"
              printf '::error file=%s,line=%s,col=%s,title=Found TODO::%s\n' "$filename" "$fileline" "$filecol" "$message"
            done < todos.txt
            if [[ -s todos.txt ]]; then
              exit 1
            fi
            
