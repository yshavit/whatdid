#!/bin/bash
set -euo pipefail

function msg() {
  echo >&2 "$@"
}

tag_name="${1-}"
if [[ -z "$tag_name" ]]; then
  msg 'No arg given. Looking for $GITHUB_REF'
  tag_name="${GITHUB_REF-}"
  if [[ -z "$tag_name" ]]; then
    msg "Didn't find \$GITHUB_REF, either. Exiting"
    exit 1
  fi
fi

# Validate that we're in a clean git state
git_status="$(git status 2>/dev/null | tail -n 1 || echo NOT_GIT)"
if [[ "$git_status" == NOT_GIT ]]; then
  msg "$appcast_dir must be in a git repo (or be its root)"
  exit 1
elif [[ "$git_status" != 'nothing to commit, working tree clean' ]]; then
  msg "$appcast_dir has uncommited changes. Commit them before running this script."
  git status | bulleted '  '
  exit 1
fi

# Fetch the tag info, and from there the workflow run.
msg "Looking for tag: $tag_name"
git fetch origin "$tag_name"
tag_sha="$(git ls-remote -t origin | grep -F "$tag_name" | cut -d$'\t' -f1)"
msg "found sha for $tag_name: $tag_sha"

jq_filter="$(printf '.[] | select(.name == "Build app" and .headSha == "%s") | .databaseId | @text' "$tag_sha")"
msg "Using jq filter: $jq_filter"

run_id="$(gh run list --json headSha,databaseId,name --jq "$jq_filter")"
msg "Found run id: $run_id"

# Download Whatdid.dmg to a tmp dir
tmp_dir="$(mktemp -d)"
msg "Downloading Whatdid.dmg to $tmp_dir"
gh run download 1706374968 -n Whatdid.dmg -D "$tmp_dir"

# Fetching release notes
gh release view "$tag_name" --json body --jq '.body' > "$tmp_dir/release-notes.md"

msg "Looking in Whatdid.dmg to find version"
hdiutil attach -plist "$tmp_dir/Whatdid.dmg" > "$tmp_dir/hdiutil-attach-info.plist"
mount_point="$(/usr/libexec/PlistBuddy -c 'Print :system-entities' "$tmp_dir/hdiutil-attach-info.plist" \
  | grep mount-point | sed 's/ *mount-point = //')"
whatdid_version="$(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$mount_point/whatdid.app/Contents/Info.plist")"
echo "found Whatdid.app with version $whatdid_version"
hdiutil detatch "$tmp_dir/Whatdid.dmg"

sparkle_dir="build_local/sparkle"
mkdir -p "$sparkle_dir"
generate_appcast="$sparkle_dir/bin/generate_appcast"
if [[ ! -f "$sparkle_dir/bin/generate_appcast" ]]; then
  msg "Building sparkle into $sparkle_dir"
  (
    cd "$sparkle_dir"
    curl -LO 'https://github.com/sparkle-project/Sparkle/releases/download/2.0.0/Sparkle-for-Swift-Package-Manager.zip'
    unzip Sparkle-for-Swift-Package-Manager.zip
  )
fi

# Upload the dmg
gh release upload "$tag_name" "appcasts/Whatdid-$whatdid_version.dmg"

# Prepare the files and invoke generate_appcast
mv "$tmp_dir/Whatdid.dmg" "appcasts/Whatdid-$whatdid_version.dmg"
mv "$tmp_dir/release-notes.md" "release-notes/$whatdid_version.md"
release_notes_url="https://whatdid.yuvalshavit.com/release-notes/$whatdid_version.html"

# Create the PR
"$generate_appcast" appcasts
git add .
git commit -m "release $whatdid_version"
git push -u origin "appcast-$whatdid_version"
gh pr create --fill



